"use strict";(self.webpackChunkfaa_website=self.webpackChunkfaa_website||[]).push([[83],{6262:(e,l)=>{l.A=(e,l)=>{const i=e.__vccOpts||e;for(const[e,o]of l)i[e]=o;return i}},2788:(e,l,i)=>{i.r(l),i.d(l,{comp:()=>t,data:()=>a});var o=i(641);const d=i.p+"assets/img/Git流程图.21536b70.png",c={},t=(0,i(6262).A)(c,[["render",function(e,l){return(0,o.uX)(),(0,o.CE)("div",null,l[0]||(l[0]=[(0,o.Fv)('<h1 id="项目-github-flow-流程" tabindex="-1"><a class="header-anchor" href="#项目-github-flow-流程"><span>项目 GitHub Flow 流程</span></a></h1><p><code>FAA-web</code>和<code>FAA本体</code>采用同样的工作流程, 阅读本文有助于您参与该工作流进行开发工作, 为您和开发组带来便捷的体验.</p><p>团队希望维护一个干净、可部署的<code>主分支(main)</code>. 因此云端主分支应用分支保护, 必须通过PR进行代码审查和合并.</p><h2 id="git-基本原理" tabindex="-1"><a class="header-anchor" href="#git-基本原理"><span>Git 基本原理</span></a></h2><p>如果您是一位初学者, 完全没有了解过版本控制工具, 请详细阅读本章节. <span class="spoiler" tabindex="-1">如果实在不想读也没关系, 直接实操一下回来看看就懂了</span></p><p><code>Git</code>是一个分布式版本控制系统，用于跟踪代码的更改，并允许多个开发者同时工作. 它的运行如下图所示. 通过将用户工作区 / 本地仓库 / 远程仓库 分别储存, 并保留期间的历史记录, 让开发者可以轻松地跟踪更改，并轻松地恢复到任何版本。</p><p>在使用前, 您需要自行搜索下载该软件, 它的部署没有任何特殊要求，就像普通的软件下载和安装一样. <em>注意：软件名称就叫做<code>Git</code>而非<code>Gtihub</code>, 这是两个不同概念.</em></p><figure><img src="'+d+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>为方便初学者理解, 我们对这些名词进行解释.</p><h3 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念"><span>基本概念</span></a></h3><ul><li><strong>分支</strong>: 表示软件开发的不同历史路径，由一系列的提交组成，每个分支代表一个独立的开发线程。</li><li><strong>提交</strong>: 代表代码的一个版本，可以视为代码在某一时刻的完整快照，记录了文件的变更和元数据。</li></ul><h3 id="层级结构" tabindex="-1"><a class="header-anchor" href="#层级结构"><span>层级结构</span></a></h3><ul><li><strong>工作区(Working Directory)</strong>: 存储在您的硬盘上的项目目录，这里是您日常编辑代码的地方。</li><li><strong>暂存区(Staging Area)</strong>: 位于工作区和本地仓库之间，用于收集和准备即将提交的改动，允许您精细化管理每次提交的内容。</li><li><strong>本地仓库(Local Repository)</strong>: 存储在本地硬盘上的版本库，包含项目的所有提交历史和分支信息。</li><li><strong>远程仓库(Remote Repository)</strong>: 位于网络上的版本库，如<code>GitHub</code>、<code>GitLab</code>等平台上的仓库，用于团队协作和代码共享。</li></ul><h3 id="核心指令" tabindex="-1"><a class="header-anchor" href="#核心指令"><span>核心指令</span></a></h3><ul><li><strong>添加(Add)</strong><ul><li>将<code>工作区</code>中的文件或改动添加到<code>暂存区</code>，为提交做准备。</li><li>支持通过图形界面或命令行逐行或逐文件添加。</li></ul></li><li><strong>提交(Commit)</strong><ul><li>将<code>暂存区</code>的改动正式记录到<code>本地仓库</code>，形成一个新的提交节点。</li><li>提交应尽量保持原子性，每次提交最好只包含一个功能点或修复。</li><li>编写清晰的提交信息，说明本次提交的目的和改动内容。</li></ul></li><li><strong>推送(Push)</strong><ul><li>将<code>本地仓库</code>的提交同步到<code>远程仓库</code>，使团队成员可以访问最新的代码。</li><li>推送时需指定<code>本地分支</code>和<code>远程分支</code>的映射关系，通常推荐使用个人专属的分支。</li></ul></li><li><strong>拉取(Pull)</strong><ul><li><code>Fetch</code> 从<code>远程仓库</code>下载最新的提交信息，但不自动合并到<code>本地仓库</code>。</li><li><code>Pull</code> 结合了<code>Fetch</code>和<code>Merge</code>，将<code>远程仓库</code>的改动合并到<code>本地工作区</code>。</li></ul></li><li><strong>合并(Merge)</strong><ul><li>用于合并两个分支的改动，解决冲突后更新<code>本地仓库</code>。</li><li>一般情况下，我们推荐使用<code>Merge</code>，而不是<code>Rebase</code>来保留更多细节。</li></ul></li><li><strong>变基(Rebase)</strong><ul><li>重新定位分支，将一系列提交应用到另一个基点上，保持线性的提交历史。</li><li>一般用于解决两个开发者从分支的不同节点开始开发导致撞车的问题。</li></ul></li><li><strong>签出(Checkout)</strong><ul><li>切换您的<code>工作区</code>到另一个<code>本地仓库</code>的分支。</li></ul></li></ul><p>流行的开发工具均可使用 <strong>可视化界面</strong> 操作它们，我们不再需要学习复杂的语法！真棒！</p><h2 id="github-flow-流程" tabindex="-1"><a class="header-anchor" href="#github-flow-流程"><span>Github Flow 流程</span></a></h2><h3 id="前期准备" tabindex="-1"><a class="header-anchor" href="#前期准备"><span>前期准备</span></a></h3><ul><li><p>上游仓库和下游仓库</p><ul><li><code>上游仓库</code>，也就是FAA的<code>主仓库</code>。</li><li><code>下游仓库</code>，也就是通过Fork(类似于复制)FAA主仓库生成的<code>个人仓库</code>。</li><li>选择 <ul><li>可以在<code>上游仓库</code>的<code>个人分支</code>直接开发，然后PR到<code>主分支</code>. 对于核心开发者更方便.</li><li>可以在<code>下游仓库</code>的主分支直接开发，然后PR到<code>上游仓库</code>的<code>主分支</code>. 无需权限, 自由自在!</li></ul></li></ul></li><li><p>直接加入开发组 - 在项目主仓库的分支上开发并PR到主分支</p><ul><li>加入FAA开发组<span class="spoiler" tabindex="-1">成为美食大战老鼠高手</span>. 欢迎根据本网页的主页信息联系我们~</li><li>在Github中被管理员通过申请，获得主分支以外区域的编辑权限。</li></ul></li><li><p>直接上手开发 - Fork到下游仓库，再PR回<code>上游仓库</code>.</p><ul><li>直接在项目Github <code>Fork</code> FAA到您自己的仓库.</li></ul></li><li><p>下载代码</p><ul><li>使用<code>clone</code>指令和仓库地址克隆仓库到您本地. 流行的集成开发环境让您可以在可视化界面轻松完成这项工作.</li><li>配置好<code>本地仓库</code>和<code>远程仓库</code>的映射关系. 流行的集成开发环境会提示您这么做, 并自动帮您配置映射.</li><li>根据<code>.gitignore</code>文件从git上剔除不必要的文件(虽然正常情况下它会自动生效), 包含此类文件的合并请求将不会通过代码审查.</li></ul></li></ul><h3 id="开始开发" tabindex="-1"><a class="header-anchor" href="#开始开发"><span>开始开发</span></a></h3><h4 id="确保网络" tabindex="-1"><a class="header-anchor" href="#确保网络"><span>确保网络</span></a></h4><ul><li>否则会有各种报错超时...</li></ul><h4 id="获取主分支更新" tabindex="-1"><a class="header-anchor" href="#获取主分支更新"><span>获取主分支更新</span></a></h4><ul><li><code>拉取(Pull)</code>代码在远程仓库最新主分支, 到您的本地仓库, 以更新代码.</li></ul><h4 id="更新功能分支" tabindex="-1"><a class="header-anchor" href="#更新功能分支"><span>更新功能分支</span></a></h4><ul><li>初来乍到 <ul><li>既然是初来乍到，代码肯定是最新的~</li><li>如果您在FAA主仓库进行开发, 从<code>主分支</code>创建于一个新的分支, 您可以用网名或您要完成的功能为它取名, 标识其独一无二, 强制英文和数字.</li></ul></li><li>老熟人 <ul><li>如果您以历史版本为基础进行开发, 请务必先将<code>主分支</code>的最新代码合并到您的功能分支, 确保没有冲突.</li><li>如果您Fork了FAA仓库到您自己的储存库开发, 则需要从<code>上游仓库</code>的<code>主分支</code>获取最新代码.</li><li>这项工作务必定期进行.</li></ul></li></ul><h4 id="开始写作吧" tabindex="-1"><a class="header-anchor" href="#开始写作吧"><span>开始写作吧</span></a></h4><ul><li>请在完成一个功能模块后, 停笔, 继续下面的流程.</li><li><code>commit</code>的改动以行为单位, 如果积累太多改动, 将无法分离不同功能, 造成混乱.</li><li>从一大堆改动中, 逐行勾选对应单个<code>commit</code>的行, 将会极其折磨.</li></ul><h4 id="添加-add-和提交-commit-到本地仓库" tabindex="-1"><a class="header-anchor" href="#添加-add-和提交-commit-到本地仓库"><span>添加(Add)和提交(Commit)到本地仓库</span></a></h4><ul><li>遵循<code>原子性</code> - 一次提交一个功能和改动 的原则，将改动们<code>添加(Add)</code>到暂存区, 再<code>提交(commit)</code>到本地仓库.</li></ul><h4 id="推送-push-本地更改到远程仓库" tabindex="-1"><a class="header-anchor" href="#推送-push-本地更改到远程仓库"><span>推送(Push)本地更改到远程仓库</span></a></h4><ul><li>请指定<code>推送(Push)</code>到和您的本地分支同名中.</li><li>如果<code>远程仓库</code>中没有同名的分支, 将自动新建它.</li></ul><h4 id="提交-pull-request-pr" tabindex="-1"><a class="header-anchor" href="#提交-pull-request-pr"><span>提交 Pull Request (PR)</span></a></h4><ul><li>登录项目Github, 使用可视化界面, 创建新的<code>PR</code>, 选择对比将您的功能分支导入到<code>主分支</code>中.</li><li>这将触发代码审查机制, 需要其他开发者审阅后才可合并到主分支中.</li><li>团队成员对<code>PR</code>进行评论和审查后将会通过, 以将您<code>功能分支</code>的改动合并到<code>主分支</code>中, 但期间可能会因为各种原因打回, 此时您需要从头开始这套流程以解决问题.</li><li>全部完成后, 您可以考虑安全地删除云端仓库上您的<code>功能分支</code>.</li><li>请遵守<code>PR</code>的<code>原子性</code>规范. <ul><li>理由 <ul><li>一个<code>PR</code>代表一个功能, 是方便项目管理多人合作的抽象方式.</li><li>一个<code>PR</code>将一次性<code>合并</code>两个分支所有不同的<code>commit</code>, 无法选择其中的部分<code>commit</code>. 这也是为什么需要您完成一个功能模块后立刻停笔.</li><li>当错误发生时, 为保证<code>主分支</code>的可用性, 会以<code>PR</code>为单位进行分支回退.</li></ul></li><li>不遵守的后果 <ul><li>若将大量互不相关的<code>commit</code>一股脑塞进一个<code>PR</code>中, 发生问题后, 将无法准确回溯故障部分<code>commit</code>, 只能全部回退.</li><li>大量不同功能混杂在一起将对进行审查的其他开发者造成极大困扰.</li><li>补救措施极其繁琐复杂, 且容易误操作.</li></ul></li><li>补救措施 <ul><li>如果您的分支积累了大量更新却长期未提交, 推荐使用<code>cherry-pick</code>拆分您的<code>commit</code>到临时的提交用分支, 以提交, 并<code>PR</code>, 相关操作在此不展开.</li></ul></li><li>杂项内容 <ul><li>部分极小的杂项<code>commit</code>可以跟着主要改动的<code>PR</code>一起提交. 例如少量改动注释, 格式化, 少量重命名等.</li></ul></li></ul></li></ul>',34)]))}]]),a=JSON.parse('{"path":"/guide/development/github_flow.html","title":"项目 GitHub Flow 流程","lang":"zh-CN","frontmatter":{"description":"项目 GitHub Flow 流程 FAA-web和FAA本体采用同样的工作流程, 阅读本文有助于您参与该工作流进行开发工作, 为您和开发组带来便捷的体验. 团队希望维护一个干净、可部署的主分支(main). 因此云端主分支应用分支保护, 必须通过PR进行代码审查和合并. Git 基本原理 如果您是一位初学者, 完全没有了解过版本控制工具, 请详细阅读...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/FAA-WebSite/guide/development/github_flow.html"}],["meta",{"property":"og:site_name","content":"FAA 美食自动助理"}],["meta",{"property":"og:title","content":"项目 GitHub Flow 流程"}],["meta",{"property":"og:description","content":"项目 GitHub Flow 流程 FAA-web和FAA本体采用同样的工作流程, 阅读本文有助于您参与该工作流进行开发工作, 为您和开发组带来便捷的体验. 团队希望维护一个干净、可部署的主分支(main). 因此云端主分支应用分支保护, 必须通过PR进行代码审查和合并. Git 基本原理 如果您是一位初学者, 完全没有了解过版本控制工具, 请详细阅读..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-06T19:49:45.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-06T19:49:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"项目 GitHub Flow 流程\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-06T19:49:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"直视深渊 StareAbyss\\",\\"url\\":\\"https://github.com/StareAbyss\\"}]}"]]},"headers":[{"level":2,"title":"Git 基本原理","slug":"git-基本原理","link":"#git-基本原理","children":[{"level":3,"title":"基本概念","slug":"基本概念","link":"#基本概念","children":[]},{"level":3,"title":"层级结构","slug":"层级结构","link":"#层级结构","children":[]},{"level":3,"title":"核心指令","slug":"核心指令","link":"#核心指令","children":[]}]},{"level":2,"title":"Github Flow 流程","slug":"github-flow-流程","link":"#github-flow-流程","children":[{"level":3,"title":"前期准备","slug":"前期准备","link":"#前期准备","children":[]},{"level":3,"title":"开始开发","slug":"开始开发","link":"#开始开发","children":[]}]}],"git":{"createdTime":1729686277000,"updatedTime":1730922585000,"contributors":[{"name":"81520","email":"815204388@qq.com","commits":4}]},"readingTime":{"minutes":7.65,"words":2296},"filePathRelative":"guide/development/github_flow.md","localizedDate":"2024年10月23日","autoDesc":true}')}}]);